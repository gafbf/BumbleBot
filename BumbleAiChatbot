import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from googletrans import Translator
import openai
from flask import Flask, request, jsonify
from datetime import datetime, timedelta
import pickle
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request

# Initialize AI chatbot (e.g., OpenAI API key)
openai.api_key = 'your-openai-api-key'
translator = Translator()

# Flask app for chatbot interface
app = Flask(__name__)

# Google Calendar API setup
SCOPES = ['https://www.googleapis.com/auth/calendar']
calendar_service = None

# Authenticate Google Calendar
def authenticate_google_calendar():
    global calendar_service
    creds = None
    if os.path.exists('token.pickle'):
        with open('token.pickle', 'rb') as token:
            creds = pickle.load(token)
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file('credentials.json', SCOPES)
            creds = flow.run_local_server(port=0)
        with open('token.pickle', 'wb') as token:
            pickle.dump(creds, token)
    calendar_service = build('calendar', 'v3', credentials=creds)

# Schedule a date in Google Calendar
def schedule_date(event_name, start_time, end_time):
    event = {
        'summary': event_name,
        'start': {'dateTime': start_time.isoformat(), 'timeZone': 'America/Sao_Paulo'},
        'end': {'dateTime': end_time.isoformat(), 'timeZone': 'America/Sao_Paulo'},
    }
    calendar_service.events().insert(calendarId='primary', body=event).execute()

# Bumble Bot Login
def bumble_login(email, password):
    driver = webdriver.Chrome()
    driver.get("https://bumble.com")
    time.sleep(2)

    login_button = driver.find_element(By.XPATH, "//button[contains(text(), 'Sign In')]")
    login_button.click()
    time.sleep(2)

    email_input = driver.find_element(By.NAME, "email")
    password_input = driver.find_element(By.NAME, "password")
    email_input.send_keys(email)
    password_input.send_keys(password)
    password_input.send_keys(Keys.RETURN)
    time.sleep(5)
    return driver

# AI Chatbot for Responses
def ai_response(user_message, language='en'):
    try:
        translated_message = translator.translate(user_message, dest='en').text
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "system", "content": "You are a helpful dating assistant."},
                      {"role": "user", "content": translated_message}]
        )
        reply = response['choices'][0]['message']['content']
        if language != 'en':
            reply = translator.translate(reply, dest=language).text
        return reply
    except Exception as e:
        return f"Error generating response: {e}"

# Automate Chatting on Bumble
def automate_chat(driver):
    matches_tab = driver.find_element(By.XPATH, "//div[contains(@aria-label, 'Matches')]")
    matches_tab.click()
    time.sleep(3)

    chats = driver.find_elements(By.XPATH, "//div[contains(@class, 'chat')]")
    for chat in chats:
        chat.click()
        time.sleep(2)

        messages = driver.find_elements(By.XPATH, "//div[contains(@class, 'message')]")
        last_message = messages[-1].text if messages else ""

        if "waiting for your reply" in last_message.lower():
            user_message = last_message
            response = ai_response(user_message)

            input_box = driver.find_element(By.XPATH, "//textarea")
            input_box.send_keys(response)
            input_box.send_keys(Keys.RETURN)

# Flask route for chatbot interaction
@app.route('/chat', methods=['POST'])
def chat():
    data = request.json
    user_message = data.get('message')
    language = data.get('language', 'en')
    response = ai_response(user_message, language)
    return jsonify({"response": response})

if __name__ == '__main__':
    authenticate_google_calendar()
    app.run(debug=True)
